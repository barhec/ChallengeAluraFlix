declare class Validator {
    private message?;
    private value?;
    private constructor();
    static fromValue(value?: number | null): Validator;
    /**
     *
     * @returns Error message if there is one
     */
    validate(): string | undefined;
    /**
     * Validates if the value is not null or undefined.
     * @param message The custom error message to display if the value is null or undefined.
     * @returns The current Validator instance.
     */
    required(message?: string): this;
    /**
     * Validates if the value is an integer. Null or undefine values will be ignored, please use required() to validate them.
     * @param message The custom error message to display if the value is not an integer.
     * @returns The current NumberValidator instance.
     */
    integer(message?: string): this;
    /**
     * Validates if the value is a decimal number. Null or undefine values will be ignored, please use required() to validate them.
     * @param message The custom error message to display if the value is not a decimal number.
     * @returns The current NumberValidator instance.
     */
    decimal(message?: string): this;
    /**
     * Validates if the value is a positive number. Null or undefine values will be ignored, please use required() to validate them.
     * @param message The custom error message to display if the value is not positive.
     * @returns The current NumberValidator instance.
     */
    positive(message?: string): this;
    /**
     * Validates if the value is a negative number. Null or undefine values will be ignored, please use required() to validate them.
     * @param message The custom error message to display if the value is not negative.
     * @returns The current NumberValidator instance.
     */
    negative(message?: string): this;
    /**
     * Validates if the value is within a specified range. Null or undefine values will be ignored, please use required() to validate them.
     * @param min The minimum value of the range.
     * @param max The maximum value of the range.
     * @param message The custom error message to display if the value is not within the specified range.
     * @returns The current NumberValidator instance.
     */
    range(min: number, max: number, message?: string): this;
    /**
     * Validates if the value is greater than a specified minimum value. Null or undefine values will be ignored, please use required() to validate them.
     * @param min The minimum value to compare against.
     * @param message The custom error message to display if the value is not greater than the specified minimum value.
     * @returns The current NumberValidator instance.
     */
    min(min: number, message?: string): this;
    /**
     * Validates if the value is less than a specified maximum value. Null or undefine values will be ignored, please use required() to validate them.
     * @param max The maximum value to compare against.
     * @param message The custom error message to display if the value is not less than the specified maximum value.
     * @returns The current NumberValidator instance.
     */
    max(max: number, message?: string): this;
}
export declare function number(value?: number | null): Validator;
export {};
