declare class Validator {
    private message?;
    private value?;
    private constructor();
    static fromValue(value?: string | null): Validator;
    /**
     *
     * @returns Error message if there is one
     */
    validate(): string | undefined;
    /**
     * Validates if the value is not null, undefined or an empty string.
     * @param message The custom error message to display if the value is null or undefined.
     * @returns The current Validator instance.
     */
    required(message?: string): this;
    /**
     * Validates if the string matches a specified regular expression. Null or undefine values will be ignored, please use required() to validate them.
     * @param regex The regular expression to match against.
     * @param message The custom error message to display if the string does not match the regular expression.
     * @returns The current StringValidator instance.
     */
    match(regex: RegExp, message?: string): this;
    /**
     * Validates if the string is a valid email address.
     * @param message The custom error message to display if the string is not a valid email address.
     * @returns The current StringValidator instance.
     */
    email(message?: string): this;
    /**
     * Validates if the string is an integer (contains only digits).
     * @param message The custom error message to display if the string is not an integer.
     * @returns The current StringValidator instance.
     */
    integer(message?: string): this;
    /**
     * Validates if the string contains only alphabetic characters (no digits or special characters).
     * @param message The custom error message to display if the string contains non-alphabetic characters.
     * @returns The current StringValidator instance.
     */
    alphabetic(message?: string): this;
    /**
     * Validates if the string contains only alphanumeric characters (letters and digits).
     * @param message The custom error message to display if the string contains non-alphanumeric characters.
     * @returns The current StringValidator instance.
     */
    alphanumeric(message?: string): this;
    /**
     * Validates if the string is a numeric value (integer or decimal).
     * @param message The custom error message to display if the string is not a numeric value.
     * @returns The current StringValidator instance.
     */
    numeric(message?: string): this;
    /**
     * Validates if the string is a valid URL.
     * @param message The custom error message to display if the string is not a valid URL.
     * @returns The current StringValidator instance.
     */
    url(message?: string): this;
    /**
     * Validates if the string has a specific length.
     * @param length The expected length of the string.
     * @param message The custom error message to display if the string length does not match the expected length.
     * @returns The current StringValidator instance.
     */
    length(length: number, message?: string): this;
    /**
     * Validates if the string has a minimum length.
     * @param minLength The minimum length the string must have.
     * @param message The custom error message to display if the string length is less than the minimum.
     * @returns The current StringValidator instance.
     */
    min(minLength: number, message?: string): this;
    /**
     * Validates if the string has a maximum length.
     * @param maxLength The maximum length the string can have.
     * @param message The custom error message to display if the string length exceeds the maximum.
     * @returns The current StringValidator instance.
     */
    max(maxLength: number, message?: string): this;
    /**
     * Validates if the string contains only valid characters for a username.
     * @param message The custom error message to display if the string contains invalid characters.
     * @returns The current StringValidator instance.
     */
    username(message?: string): this;
    /**
     * Validates if the string contains only valid characters for a name (letters and spaces).
     * @param message The custom error message to display if the string contains invalid characters.
     * @returns The current StringValidator instance.
     */
    name(message?: string): this;
    /**
     * Validates if the string is a valid UUID (Universally Unique Identifier).
     * @param message The custom error message to display if the string is not a valid UUID.
     * @returns The current StringValidator instance.
     */
    uuid(message?: string): this;
    /**
     * Validates if the string contains only lowercase characters.
     * @param message The custom error message to display if the string contains uppercase characters.
     * @returns The current StringValidator instance.
     */
    lowercase(message?: string): this;
    /**
     * Validates if the string contains only uppercase characters.
     * @param message The custom error message to display if the string contains lowercase characters.
     * @returns The current StringValidator instance.
     */
    uppercase(message?: string): this;
}
export declare function string(value?: string): Validator;
export {};
