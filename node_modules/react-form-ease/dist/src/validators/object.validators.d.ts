declare class Validator {
    private message?;
    private value?;
    private constructor();
    static fromValue(value?: object | null): Validator;
    /**
     *
     * @returns Error message if there is one
     */
    validate(): string | undefined;
    /**
     * Validates if the value is not null or undefined.
     * @param message The custom error message to display if the value is null or undefined.
     * @returns The current Validator instance.
     */
    required(message?: string): this;
    /**
     * Ensures that the object is not empty.
     * @param message - Custom error message to display if the validation fails.
     * @returns This validator instance for chaining additional validations.
     */
    notEmpty(message?: string): this;
    /**
     * Ensures that the object contains all the specified required properties.
     * @param requiredProps - An array of property names that must be present in the object.
     * @param message - Custom error message to display if the validation fails.
     * @returns This validator instance for chaining additional validations.
     */
    hasRequiredProperties(requiredProps: string[], message?: string): this;
    /**
     * Ensures that the object only contains allowed properties specified in the allowedProps array.
     * @param allowedProps - An array of property names that are allowed in the object.
     * @param message - Custom error message to display if the validation fails.
     * @returns This validator instance for chaining additional validations.
     */
    hasOnlyAllowedProperties(allowedProps: string[], message?: string): this;
}
export declare function object(value?: object | null): Validator;
export {};
