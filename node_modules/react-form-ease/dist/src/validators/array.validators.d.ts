declare class Validator<T> {
    private message?;
    private value?;
    private constructor();
    static fromValue<T>(value?: T[] | null): Validator<T>;
    /**
     * @returns Error message if there is one
     */
    validate(): string | undefined;
    /**
     * Validates if the value is not null or undefined.
     * @param message The custom error message to display if the value is null or undefined.
     * @returns The current Validator instance.
     */
    required(message?: string): this;
    /**
     * Ensures that the array is not empty.
     *
     * @param message - Custom error message to display if the validation fails.
     * @returns This validator instance for chaining additional validations.
     */
    notEmpty(message?: string): this;
    /**
     * Ensures that the array does not contain any duplicate elements.
     *
     * @param message - Custom error message to display if the validation fails.
     * @returns This validator instance for chaining additional validations.
     */
    hasNoDuplicates(message?: string): this;
    /**
     * Ensures that the array has at least the specified minimum length.
     *
     * @param minLength - The minimum number of elements that the array should have.
     * @param message - Custom error message to display if the validation fails.
     * @returns This validator instance for chaining additional validations.
     */
    minLength(minLength: number, message?: string): this;
    /**
     * Ensures that the array contains the specified element.
     *
     * @param element - The element that should be present in the array.
     * @param message - Custom error message to display if the validation fails.
     * @returns This validator instance for chaining additional validations.
     */
    contains(element: T, message?: string): this;
    /**
     * Ensures that all elements of the array match the specified predicate function.
     *
     * @param predicate - A function that takes an array element and returns a boolean.
     *                    All elements should satisfy this predicate function.
     * @param message - Custom error message to display if the validation fails.
     * @returns This validator instance for chaining additional validations.
     */
    allMatch(predicate: (element: T) => boolean, message?: string): this;
}
export declare function array<T>(value?: T[] | null): Validator<T>;
export {};
