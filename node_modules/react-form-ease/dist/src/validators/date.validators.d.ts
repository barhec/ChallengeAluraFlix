declare class Validator {
    private message?;
    private value?;
    private constructor();
    static fromValue(value?: string | Date | null): Validator;
    /**
     *
     * @returns Error message if there is one
     */
    validate(): string | undefined;
    /**
     * Validates if the value is not null or undefined.
     * @param message The custom error message to display if the value is null or undefined.
     * @returns The current Validator instance.
     */
    required(message?: string): this;
    /**
     * Validates if the date is valid. Null or undefine values will be ignored, please use required() to validate them.
     * @param message The custom error message to display if the date is invalid.
     * @returns The current DateValidator instance.
     */
    isValid(message?: string): this;
    /**
     * Validates if the year of the date is a leap year. Null or undefine values will be ignored, please use required() to validate them.
     * @param message The custom error message to display if the year is not a leap year.
     * @returns The current DateValidator instance.
     */
    leapYear(message?: string): this;
    /**
     * Validates if the date is greater than a specified compareDate. Null or undefine values will be ignored, please use required() to validate them.
     * @param compareDate The date to compare against.
     * @param message The custom error message to display if the date is not greater than compareDate.
     * @returns The current DateValidator instance.
     */
    greaterThan(compareDate: Date, message?: string): this;
    /**
     * Validates if the date is less than a specified compareDate. Null or undefine values will be ignored, please use required() to validate them.
     * @param compareDate The date to compare against.
     * @param message The custom error message to display if the date is not less than compareDate.
     * @returns The current DateValidator instance.
     */
    lessThan(compareDate: Date, message?: string): this;
    /**
     * Validates if the date is within a specified range. Null or undefine values will be ignored, please use required() to validate them.
     * @param startDate The start date of the range.
     * @param endDate The end date of the range.
     * @param message The custom error message to display if the date is not within the specified range.
     * @returns The current DateValidator instance.
     */
    range(startDate: Date, endDate: Date, message?: string): this;
}
export declare function date(value?: string | Date | null): Validator;
export {};
