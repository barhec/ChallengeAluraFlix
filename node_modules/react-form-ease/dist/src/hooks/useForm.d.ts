type Validator<T, F> = (value: T, form: F) => string | undefined;
type AsyncValidator<T, F> = (value: T, form: F) => Promise<string | void>;
type FormOptions<T> = {
    data: T;
    validations?: {
        [key in keyof Partial<T>]: Validator<T[key], T>;
    };
    asyncValidations?: {
        [key in keyof Partial<T>]: AsyncValidator<T[key], T>;
    };
};
type Errors<T> = {
    [key in keyof Partial<T>]: string;
};
export declare function useForm<T>(options: FormOptions<T>): {
    formData: T;
    updateForm: (newData: Partial<T>) => void;
    isLoading: boolean;
    setIsLoading: import("react").Dispatch<import("react").SetStateAction<boolean>>;
    resetForm: () => void;
    validateForm: () => boolean;
    validateFormAsync: () => Promise<boolean>;
    errors: Errors<T> | undefined;
    validateInput: (field: keyof T) => boolean;
    validateInputAsync: (field: keyof T) => Promise<boolean>;
};
export {};
